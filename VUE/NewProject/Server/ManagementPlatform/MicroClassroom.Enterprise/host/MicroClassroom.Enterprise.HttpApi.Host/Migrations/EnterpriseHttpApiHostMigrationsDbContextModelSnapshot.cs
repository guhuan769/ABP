// <auto-generated />
using System;
using MicroClassroom.Enterprise.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Volo.Abp.EntityFrameworkCore;

#nullable disable

namespace MicroClassroom.Enterprise.Migrations
{
    [DbContext(typeof(EnterpriseHttpApiHostMigrationsDbContext))]
    partial class EnterpriseHttpApiHostMigrationsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.SqlServer)
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MicroClassroom.Enterprise.Banner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id")
                        .HasComment("主键标识");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Image")
                        .HasComment("图像");

                    b.Property<Guid>("MechanismId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MechanismId")
                        .HasComment("机构");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId")
                        .HasComment("租户id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Title")
                        .HasComment("标题");

                    b.HasKey("Id")
                        .HasName("pk_banner_id");

                    b.HasIndex("MechanismId");

                    b.ToTable("Banner", (string)null);
                });

            modelBuilder.Entity("MicroClassroom.Enterprise.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id")
                        .HasComment("主键标识");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CategoryId")
                        .HasComment("课程分类");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndAt")
                        .HasComment("结束时间");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool?>("HasPay")
                        .HasColumnType("bit")
                        .HasColumnName("HasPay")
                        .HasComment("是否付费");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Image")
                        .HasComment("图像");

                    b.Property<string>("Introduce")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Introduce")
                        .HasComment("介绍");

                    b.Property<Guid>("MechanismId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name")
                        .HasComment("名称");

                    b.Property<decimal>("Price")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("Price")
                        .HasComment("课程价格");

                    b.Property<DateTime?>("StartAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartAt")
                        .HasComment("开始时间");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId")
                        .HasComment("租户id");

                    b.HasKey("Id")
                        .HasName("pk_course_id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MechanismId");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("MicroClassroom.Enterprise.CourseCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id")
                        .HasComment("主键标识");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name")
                        .HasComment("分类名");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status")
                        .HasComment("分类状态");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId")
                        .HasComment("租户id");

                    b.HasKey("Id")
                        .HasName("pk_course_category_id");

                    b.ToTable("CourseCategory", (string)null);
                });

            modelBuilder.Entity("MicroClassroom.Enterprise.CourseItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id")
                        .HasComment("主键标识");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CourseId")
                        .HasComment("课程id");

                    b.Property<float>("Duration")
                        .HasColumnType("real")
                        .HasColumnName("Duration")
                        .HasComment("视频时长");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndAt")
                        .HasComment("结束时间");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("Order")
                        .HasComment("排序");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartAt")
                        .HasComment("开始时间");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId")
                        .HasComment("租户id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Name")
                        .HasComment("目录名");

                    b.Property<string>("Video")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Video")
                        .HasComment("视频地址");

                    b.HasKey("Id")
                        .HasName("pk_course_item_id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseItem", (string)null);
                });

            modelBuilder.Entity("MicroClassroom.Enterprise.CourseTeacher", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id")
                        .HasComment("主键标识");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CourseId")
                        .HasComment("课程id");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TeacherId")
                        .HasComment("教师id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId")
                        .HasComment("租户id");

                    b.HasKey("Id")
                        .HasName("pk_course_teacher_id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseTeacher", (string)null);
                });

            modelBuilder.Entity("MicroClassroom.Enterprise.Mechanism", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id")
                        .HasComment("主键标识");

                    b.Property<string>("About")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("About")
                        .HasComment("关于我们");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<int?>("Grade")
                        .HasColumnType("int")
                        .HasColumnName("Grade")
                        .HasComment("等级");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Image")
                        .HasComment("图像");

                    b.Property<string>("Introduce")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Introduce")
                        .HasComment("介绍");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Name")
                        .HasComment("名称");

                    b.Property<string>("Pinyin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Pinyin")
                        .HasComment("拼音或租户名");

                    b.Property<string>("Slogo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Slogo")
                        .HasComment("Slogo");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId")
                        .HasComment("租户id");

                    b.HasKey("Id")
                        .HasName("pk_mechanism_id");

                    b.ToTable("Mechanism", (string)null);
                });

            modelBuilder.Entity("MicroClassroom.Enterprise.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id")
                        .HasComment("主键标识");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Image")
                        .HasComment("图像");

                    b.Property<string>("Introduce")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Introduce")
                        .HasComment("介绍");

                    b.Property<Guid>("MechanismId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MechanismId")
                        .HasComment("机构");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Name")
                        .HasComment("名称");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId")
                        .HasComment("租户id");

                    b.HasKey("Id")
                        .HasName("pk_teacher_id");

                    b.HasIndex("MechanismId");

                    b.ToTable("Teacher", (string)null);
                });

            modelBuilder.Entity("MicroClassroom.Enterprise.Banner", b =>
                {
                    b.HasOne("MicroClassroom.Enterprise.Mechanism", null)
                        .WithMany("Banners")
                        .HasForeignKey("MechanismId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mechanism_banner_id");
                });

            modelBuilder.Entity("MicroClassroom.Enterprise.Course", b =>
                {
                    b.HasOne("MicroClassroom.Enterprise.CourseCategory", null)
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_course_id");

                    b.HasOne("MicroClassroom.Enterprise.Mechanism", null)
                        .WithMany("Courses")
                        .HasForeignKey("MechanismId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mechanism_course_id");
                });

            modelBuilder.Entity("MicroClassroom.Enterprise.CourseItem", b =>
                {
                    b.HasOne("MicroClassroom.Enterprise.Course", null)
                        .WithMany("CourseItems")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_item_id");
                });

            modelBuilder.Entity("MicroClassroom.Enterprise.CourseTeacher", b =>
                {
                    b.HasOne("MicroClassroom.Enterprise.Course", null)
                        .WithMany("CourseTeachers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MicroClassroom.Enterprise.Teacher", b =>
                {
                    b.HasOne("MicroClassroom.Enterprise.Mechanism", null)
                        .WithMany("Teachers")
                        .HasForeignKey("MechanismId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mechanism_teacher_id");
                });

            modelBuilder.Entity("MicroClassroom.Enterprise.Course", b =>
                {
                    b.Navigation("CourseItems");

                    b.Navigation("CourseTeachers");
                });

            modelBuilder.Entity("MicroClassroom.Enterprise.CourseCategory", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("MicroClassroom.Enterprise.Mechanism", b =>
                {
                    b.Navigation("Banners");

                    b.Navigation("Courses");

                    b.Navigation("Teachers");
                });
#pragma warning restore 612, 618
        }
    }
}
